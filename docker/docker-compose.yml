version: '3'
name: 'flinkcommerce'
services:
  data:
    build:
      context: ../data
      dockerfile: Dockerfile
    depends_on:
      broker:
        condition: service_healthy
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_SERVERS: server.1=zoo1:2888:3888
      KAFKA_OPTS: '-Dzookeeper.4lw.commands.whitelist=ruok'
      restart: always
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    healthcheck:
      test: ['CMD', 'bash', '-c', 'echo ruok | nc localhost 2181 | grep imok']
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_HOST_NAME: 172.19.0.1
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      restart: always
    volumes:
      - broker_data:/var/lib/kafka
    healthcheck:
      test: ['CMD', 'bash', '-c', 'nc -z localhost 9092']
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: /bin/bash
    command: -c "sleep 10; /etc/confluent/docker/run"

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    ports:
      - 9200:9200
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  # Flink
  jobmanager:
    image: flink:1.18.0-scala_2.12-java11
    volumes:
      - ../app/out/artifacts/FlinkCommerce_jar:/opt/flink/usrlib
      - ./startup.sh:/startup.sh
    container_name: jobmanager
    ports:
      - '8081:8081'
    command: jobmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        bootstrap.servers: broker:9092
    depends_on:
      broker:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:8081/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 1m

  taskmanager:
    image: flink:1.18.0-scala_2.12-java11
    volumes:
      - ../app/out/artifacts/FlinkCommerce_jar:/opt/flink/usrlib
    container_name: taskmanager
    depends_on:
      broker:
        condition: service_healthy
    command: taskmanager
    environment:
      FLINK_PROPERTIES: |
        jobmanager.rpc.address: jobmanager
        bootstrap.servers: broker:9092
        taskmanager.numberOfTaskSlots: 4

volumes:
  zookeeper_data:
  broker_data:
